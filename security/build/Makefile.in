#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

DEPTH		= @DEPTH@
topsrcdir	= @top_srcdir@
srcdir		= @srcdir@
VPATH		= @srcdir@

include $(DEPTH)/config/autoconf.mk
CC_WRAPPER =
CXX_WRAPPER =
include $(topsrcdir)/config/config.mk

ifndef MOZ_NATIVE_NSS
LOADABLE_ROOT_MODULE = $(DLL_PREFIX)nssckbi$(DLL_SUFFIX)
endif

NSS3_LIB = $(DLL_PREFIX)nss3$(DLL_SUFFIX)
NSSUTIL3_LIB = $(DLL_PREFIX)nssutil3$(DLL_SUFFIX)
SMIME3_LIB = $(DLL_PREFIX)smime3$(DLL_SUFFIX)
SSL3_LIB =  $(DLL_PREFIX)ssl3$(DLL_SUFFIX)
SOFTOKEN3_LIB = $(DLL_PREFIX)softokn3$(DLL_SUFFIX)

ifndef NSS_DISABLE_DBM
NSSDBM3_LIB = $(DLL_PREFIX)nssdbm3$(DLL_SUFFIX)
else
NSSDBM3_LIB = 
endif

ifndef MOZ_NATIVE_NSS
ifneq (,$(filter OS2 WINNT,$(OS_ARCH)))
SDK_LIBS = \
  $(DIST)/lib/$(LIB_PREFIX)crmf.$(LIB_SUFFIX) \
  $(DIST)/lib/$(LIB_PREFIX)smime3.$(LIB_SUFFIX) \
  $(DIST)/lib/$(LIB_PREFIX)ssl3.$(LIB_SUFFIX) \
  $(DIST)/lib/$(LIB_PREFIX)nss3.$(LIB_SUFFIX) \
  $(DIST)/lib/$(LIB_PREFIX)nssutil3.$(LIB_SUFFIX) \
  $(NULL)
else
SDK_LIBS = \
  $(DIST)/lib/$(LIB_PREFIX)crmf.$(LIB_SUFFIX) \
  $(DIST)/lib/$(LIB_PREFIX)smime.$(LIB_SUFFIX) \
  $(DIST)/lib/$(LIB_PREFIX)ssl.$(LIB_SUFFIX) \
  $(DIST)/lib/$(LIB_PREFIX)nss.$(LIB_SUFFIX) \
  $(DIST)/lib/$(LIB_PREFIX)nssutil.$(LIB_SUFFIX) \
  $(NULL)
endif
endif

# Default
HAVE_FREEBL_LIBS = 1

# 32-bit HP-UX PA-RISC
ifeq ($(OS_ARCH), HP-UX)
ifneq ($(OS_TEST), ia64)
ifndef HAVE_64BIT_OS
HAVE_FREEBL_LIBS =
HAVE_FREEBL_LIBS_32 = 1
endif
endif
endif

# SunOS SPARC
ifeq ($(OS_ARCH), SunOS)
ifneq (86,$(findstring 86,$(OS_TEST)))
ifdef HAVE_64BIT_OS
HAVE_FREEBL_LIBS =
HAVE_FREEBL_LIBS_64 = 1
else
HAVE_FREEBL_LIBS =
HAVE_FREEBL_LIBS_32 = 1
HAVE_FREEBL_LIBS_32INT64 = 1
endif
endif
endif

ifdef HAVE_FREEBL_LIBS
FREEBL_LIB = $(DLL_PREFIX)freebl3$(DLL_SUFFIX)
endif
ifdef HAVE_FREEBL_LIBS_32
FREEBL_32INT_LIB = libfreebl_32int_3$(DLL_SUFFIX)
FREEBL_32FPU_LIB = libfreebl_32fpu_3$(DLL_SUFFIX)
endif
ifdef HAVE_FREEBL_LIBS_32INT64
FREEBL_32INT64_LIB = libfreebl_32int64_3$(DLL_SUFFIX)
endif
ifdef HAVE_FREEBL_LIBS_64
FREEBL_64INT_LIB = libfreebl_64int_3$(DLL_SUFFIX)
FREEBL_64FPU_LIB = libfreebl_64fpu_3$(DLL_SUFFIX)
endif

ABS_DIST := $(call core_abspath,$(DIST))
ifeq ($(HOST_OS_ARCH),WINNT)
ifdef CYGDRIVE_MOUNT
ABS_DIST := $(shell cygpath -w $(ABS_DIST) | sed -e 's|\\|/|g')
endif
ifneq (,$(filter mingw%,$(host_os)))
ABS_DIST := $(shell cd $(DIST) && pwd -W)
endif
endif
# For all variables such as DLLFLAGS, that may contain $(DIST)
DIST := $(ABS_DIST)
NSPR_INCLUDE_DIR = $(firstword $(filter -I%,$(NSPR_CFLAGS)))
ifneq (,$(strip $(NSPR_INCLUDE_DIR)))
NSPR_INCLUDE_DIR := $(subst -I,,$(subst -I$(DIST),-I$(ABS_DIST),$(NSPR_INCLUDE_DIR)))
else
NSPR_INCLUDE_DIR = $(ABS_DIST)/include/nspr
endif
NSPR_LIB_DIR = $(firstword $(filter -L%,$(NSPR_LIBS)))
ifneq (,$(strip $(NSPR_LIB_DIR)))
NSPR_LIB_DIR := $(subst -L,,$(subst -L$(DIST),-L$(ABS_DIST),$(NSPR_LIB_DIR)))
else
NSPR_LIB_DIR = $(ABS_DIST)/lib
endif
# Can't pass this in DEFAULT_GMAKE_FLAGS because that overrides
# definitions in NSS, so just export it into the sub-make's environment.
ifeq (WINNT_1,$(OS_TARGET)_$(MOZ_MEMORY))
export DLLFLAGS
endif

# To get debug symbols from NSS
export MOZ_DEBUG_SYMBOLS

ifdef .PYMAKE
NSSMAKE = $(GMAKE)
else
NSSMAKE = $(MAKE)
endif

# NSS makefiles are not safe for parallel execution.
DEFAULT_GMAKE_FLAGS = MAKE="$(NSSMAKE) -j1" -j1
DEFAULT_GMAKE_FLAGS += CC="$(CC)"
DEFAULT_GMAKE_FLAGS += SOURCE_MD_DIR=$(ABS_DIST)
DEFAULT_GMAKE_FLAGS += SOURCE_MDHEADERS_DIR=$(NSPR_INCLUDE_DIR)
DEFAULT_GMAKE_FLAGS += DIST=$(ABS_DIST)
DEFAULT_GMAKE_FLAGS += NSPR_INCLUDE_DIR=$(NSPR_INCLUDE_DIR)
DEFAULT_GMAKE_FLAGS += NSPR_LIB_DIR=$(NSPR_LIB_DIR)
DEFAULT_GMAKE_FLAGS += MOZILLA_CLIENT=1
DEFAULT_GMAKE_FLAGS += NO_MDUPDATE=1
DEFAULT_GMAKE_FLAGS += NSS_ENABLE_ECC=1
DEFAULT_GMAKE_FLAGS += NSINSTALL="$(NSINSTALL)"
ifndef MOZ_NATIVE_SQLITE
DEFAULT_GMAKE_FLAGS += SQLITE_LIB_NAME=mozsqlite3
DEFAULT_GMAKE_FLAGS += SQLITE_INCLUDE_DIR=$(ABS_DIST)/include
endif
ifdef NSS_DISABLE_DBM 
DEFAULT_GMAKE_FLAGS += NSS_DISABLE_DBM=1
endif
ABS_topsrcdir   := $(call core_abspath,$(topsrcdir))
# Hack to force NSS build system to use "normal" object directories
DEFAULT_GMAKE_FLAGS += BUILD='$(MOZ_BUILD_ROOT)/security/$$(subst $(shell cd $(topsrcdir); pwd)/security/,,$$(CURDIR))'
DEFAULT_GMAKE_FLAGS += BUILD_TREE='$$(BUILD)' OBJDIR='$$(BUILD)' DEPENDENCIES='$$(BUILD)/.deps' SINGLE_SHLIB_DIR='$$(BUILD)'
DEFAULT_GMAKE_FLAGS += SOURCE_XP_DIR=$(ABS_DIST)
ifndef MOZ_DEBUG
DEFAULT_GMAKE_FLAGS += BUILD_OPT=1 OPT_CODE_SIZE=1
endif
ifdef GNU_CC
DEFAULT_GMAKE_FLAGS += NS_USE_GCC=1
else
DEFAULT_GMAKE_FLAGS += NS_USE_GCC=
endif
ifdef USE_N32
# It is not really necessary to specify USE_PTHREADS=1.  USE_PTHREADS
# merely adds _PTH to coreconf's OBJDIR name.
DEFAULT_GMAKE_FLAGS += USE_N32=1 USE_PTHREADS=1
endif
ifdef HAVE_64BIT_OS
DEFAULT_GMAKE_FLAGS += USE_64=1
endif
ifeq ($(OS_ARCH),WINNT)
DEFAULT_GMAKE_FLAGS += OS_TARGET=WIN95
ifdef MOZ_DEBUG
ifndef MOZ_NO_DEBUG_RTL
DEFAULT_GMAKE_FLAGS += USE_DEBUG_RTL=1
endif
endif
endif # WINNT
ifeq ($(OS_ARCH),OS2)
ifdef MOZ_OS2_HIGH_MEMORY
DEFAULT_GMAKE_FLAGS += MOZ_OS2_HIGH_MEMORY=1
endif
endif # OS2
ifeq ($(OS_ARCH),Darwin)
# Make nsinstall use absolute symlinks by default when building NSS
# for Mozilla on Mac OS X. (Bugzilla bug 193164)
ifndef NSDISTMODE
DEFAULT_GMAKE_FLAGS += NSDISTMODE=absolute_symlink
endif
ifdef MACOS_SDK_DIR
DEFAULT_GMAKE_FLAGS += MACOS_SDK_DIR=$(MACOS_SDK_DIR)
endif
endif

# Turn off TLS compression support because it requires system zlib.
# See bug 580679 comment 18.
DEFAULT_GMAKE_FLAGS += NSS_ENABLE_ZLIB=

# Disable building of the test programs in security/nss/lib/zlib
DEFAULT_GMAKE_FLAGS += PROGRAMS=

# Disable creating .chk files. They will be generated from packager.mk
# When bug 681624 lands, we can replace CHECKLOC= with SKIP_SHLIBSIGN=1
DEFAULT_GMAKE_FLAGS += CHECKLOC=

ifdef CROSS_COMPILE

DEFAULT_GMAKE_FLAGS += \
	NATIVE_CC="$(HOST_CC)" \
	CC="$(CC)" \
	CCC="$(CXX)" \
	LINK="$(LD)" \
	AS="$(AS)" \
	AR='$(AR) $(AR_FLAGS:$@=$$@)' \
	RANLIB="$(RANLIB)" \
	RC="$(RC) $(RCFLAGS)" \
	OS_ARCH="$(OS_ARCH)" \
	OS_TEST="$(OS_TEST)" \
	CPU_ARCH="$(TARGET_CPU)" \
	$(NULL)

# Android has pthreads integrated into -lc, so OS_PTHREAD is set to nothing
ifeq ($(OS_TARGET), Android)
DEFAULT_GMAKE_FLAGS += \
	OS_RELEASE="2.6" \
	OS_PTHREAD= \
	STANDARDS_CFLAGS="-std=gnu89" \
	$(NULL)

DEFAULT_GMAKE_FLAGS += ARCHFLAG="$(CFLAGS) -DCHECK_FORK_GETPID -DRTLD_NOLOAD=0 -include $(ABS_topsrcdir)/security/manager/android_stub.h"
endif
endif

ifdef WRAP_LDFLAGS
DEFAULT_GMAKE_FLAGS += \
	LDFLAGS="$(LDFLAGS) $(WRAP_LDFLAGS)" \
	DSO_LDOPTS="$(DSO_LDOPTS) $(LDFLAGS) $(WRAP_LDFLAGS)" \
	$(NULL)
endif

DEFAULT_GMAKE_FLAGS += FREEBL_NO_DEPEND=0
ifeq ($(OS_TARGET),Linux)
DEFAULT_GMAKE_FLAGS += FREEBL_LOWHASH=1
endif

ifdef MOZ_NO_WLZDEFS
DEFAULT_GMAKE_FLAGS += ZDEFS_FLAG=
endif
ifdef MOZ_CFLAGS_NSS
DEFAULT_GMAKE_FLAGS += XCFLAGS="$(CFLAGS)"
DEFAULT_GMAKE_FLAGS += DARWIN_DYLIB_VERSIONS="-compatibility_version 1 -current_version 1 $(LDFLAGS)"
endif

ifdef MOZ_NSS_PATCH
# If we're applying a patch, we'll copy the NSS source to the objdir
# and build it from there.
NSS_SRCDIR = $(CURDIR)/nss

# This will copy and patch the NSS source for every build.
# Since we "cp -p", it won't force rebuilds for most files, just
# for patched files, but that's easier than trying to track
# dependencies for patched files.
export::
	rm -rf $(NSS_SRCDIR)
	$(NSINSTALL) -D $(NSS_SRCDIR)/security
	cp -Rp $(topsrcdir)/security/nss $(NSS_SRCDIR)/security
	cp -Rp $(topsrcdir)/security/coreconf $(NSS_SRCDIR)/security
	cp -Rp $(topsrcdir)/security/dbm $(NSS_SRCDIR)/security
	cp -Rp $(topsrcdir)/dbm $(NSS_SRCDIR)
	(cd $(NSS_SRCDIR) && patch -p1 < $(call core_abspath,$(MOZ_NSS_PATCH)))
else
NSS_SRCDIR = $(topsrcdir)
endif

NSS_DIRS =
ifndef NSS_DISABLE_DBM
NSS_DIRS += dbm
endif
NSS_DIRS += \
  nss/lib \
  nss/cmd/lib \
  nss/cmd/shlibsign \
  $(NULL)

ifdef ENABLE_TESTS
NSS_DIRS += \
  nss/cmd/certutil \
  nss/cmd/pk12util \
  nss/cmd/modutil \
  $(NULL)
endif

ifndef MOZ_NATIVE_NSS
define build_rules
libs::
	$$(NSSMAKE) -C $$(NSS_SRCDIR)/security/$(1) $$(DEFAULT_GMAKE_FLAGS)

clean clobber clobber_all realclean distclean depend::
	$$(NSSMAKE) -C $$(NSS_SRCDIR)/security/$(1) $$(DEFAULT_GMAKE_FLAGS) clean
endef
$(foreach dir,$(NSS_DIRS),$(eval $(call build_rules,$(dir))))

NSS_LIBS = \
  $(LOADABLE_ROOT_MODULE) \
  $(SOFTOKEN3_LIB) \
  $(NSSDBM3_LIB) \
  $(NSS3_LIB) \
  $(NSSUTIL3_LIB) \
  $(SSL3_LIB) \
  $(SMIME3_LIB) \
  $(FREEBL_LIB) \
  $(FREEBL_32INT_LIB) \
  $(FREEBL_32FPU_LIB) \
  $(FREEBL_32INT64_LIB) \
  $(FREEBL_64INT_LIB) \
  $(FREEBL_64FPU_LIB) \
  $(NULL)

define install_rules
libs::
ifeq ($(OS_ARCH)_$(1), SunOS_$(SOFTOKEN3_LIB))
# has to use copy mode on Solaris, see #665509
	$$(NSINSTALL) -t -m 755 $$(DIST)/lib/$(1) $$(DIST)/bin
else
	$$(INSTALL) -m 755 $$(DIST)/lib/$(1) $$(DIST)/bin
	$$(call PROCESS_SYMFILE,$$(DIST)/lib/$(1),$$(INSTALL) -m 755,$$(DIST)/bin)
endif

install::
	$$(SYSINSTALL) -m 755 $$(DIST)/lib/$(1) $$(DESTDIR)$$(mozappdir)
endef
$(foreach lib,$(NSS_LIBS),$(eval $(call install_rules,$(lib))))

libs::
	$(INSTALL) -m 755 $(SDK_LIBS) $(DIST)/sdk/lib
# NSS installs headers to dist/public and we want them in dist/include
	$(NSINSTALL) -D $(DIST)/include/nss
	(cd $(DIST)/public/nss && tar $(TAR_CREATE_FLAGS) - .) | \
	  (cd $(DIST)/include && tar -xf -)

endif # MOZ_NATIVE_NSS

include $(topsrcdir)/config/rules.mk
